import * as TActions from "@tenderly/actions-test";

import { expect } from "chai";

//Read IVAN_PK from .env file
import * as dotenv from "dotenv";
dotenv.config();

async function simulateOnFork(context: TActions.TestContext) {
  // create a fork new fork with the freshest data from the network - using the DIY lib until an official SDK jumps in
  const myApi = tenderlyApi(
    TENDERLY_PROJECT_SLUG,
    TENDERLY_USERNAME,
    // TODO: add the TENDERLY_ACCESS_KEY to the secrets in the dashboard
    await context.secrets.get("TENDERLY_ACCESS_KEY")
  );
  const fork = await myApi.aTenderlyFork({ network_id: "3" });

  const ethersOnFork = fork.provider; // just grab the provider

  const tokenOnFork = new ethers.Contract(
    MULTISIG_TOKEN_ADDRESS,
    TokenAbi,
    ethersOnFork.getSigner()
  );

  const initialBalance = (await tokenOnFork.balanceOf(
    MULTISIG_WALLET_ADDRESS
  )) as BigNumber;

  await ethersOnFork.send("tenderly_setBalance", [
    [MULTISIG_WALLET_ADDRESS],
    ethers.utils.hexValue(ethers.utils.parseUnits("10", "ether")),
  ]);

  const tx = {
    to: submitted.to,
    from: MULTISIG_WALLET_ADDRESS,
    data: submitted.data,
    value: BigNumber.from(submitted.value).toHexString(),
  };

  // send the TX
  await ethersOnFork.send("eth_sendTransaction", [tx]);

  const balance = (await tokenOnFork.balanceOf(
    MULTISIG_WALLET_ADDRESS
  )) as BigNumber;

  console.log("Balances", { initialBalance, balance });

  await fork.removeFork(); // remove the fork. For debugging purposes leave it in place

  return { changeInBalance: balance.sub(initialBalance) };
}

describe("ynETHx withdraw", () => {

  it("Withdraw using Ivan's wallet", (done) => {
    const runtime = new TActions.TestRuntime();
    
    if (!process.env.IVAN_PK) {
      throw new Error("Please set IVAN_PK in the .env file");
    }

    runtime.context.secrets.put(
      "IVAN_PK",
      process.env.IVAN_PK
    );

    // Populate runtime context with provider object generated by Hardhat
    runtime.context.storage.putJson("provider", {
      type: "hardhat",
      network: "localhost",
      chainId: 31337,
      url: ""
    });

    // Invoke the mock action
    runtime.execute(onPoolCreatedEventEmitted, txEventCreatePool);

  });

});